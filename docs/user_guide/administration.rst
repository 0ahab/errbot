Administration
==============

This document describes how to configure, administer and interact with errbot.


Configuration
-------------

There is a split between two types of configuration within errbot.
On the one hand there is "setup" information,
such as the (chat network) backend to use, storage selection
and other settings related to how errbot should run.
These settings are all configured through the `config.py` configuration file as explained in
:ref:`configuration <configuration>`.

The other type of configuration is the "runtime" configuration such as the plugin settings.
Plugins can be dynamically configured through chatting with the bot by using the :code:`!plugin config <plugin name>` command.

There are a few other commands which adjust the runtime configuration,
such as the :code:`!plugin blacklist <plugin>` command to unload and blacklist a specific plugin.

You can view a list of all these commands and their help documentation by using the built-in help function.


.. _builtin_help_function:

The built-in help function
^^^^^^^^^^^^^^^^^^^^^^^^^^

To get a list of all available commands, you can issue::

    !help

If you just wish to know more about a specific command you can issue::

    !help <command>


Managing plugins
-----------------

To get a list of public plugin repos you can issue::

    !repos

Searching can be done by specifying one or more keywords,
for example::

    !repos search hello

To install a plugin from the list, issue::

    !repos install <name of plugin>

You can always uninstall a plugin again with::

    !repos uninstall <plugin>

You will probably want to update your plugins periodically. This can be done with::

    !repos update all


Dependencies
^^^^^^^^^^^^

Please pay attention when you install a plugin as it may have additional dependencies.
If the plugin contains a `requirements.txt` file then Errbot will automatically check the requirements listed within and warn you when you are missing any.

Additionally, if you set :code:`AUTOINSTALL_DEPS` to :code:`True` in your **config.py**, Errbot will use pip to install any missing dependencies automatically.
If you have installed Err in a virtualenv, this will run the equivalent of :code:`pip install -r requirements.txt`.
If no virtualenv is detected, the equivalent of :code:`pip install --user -r requirements.txt` is used to ensure the package(s) is/are only installed for the user running Err.

.. _access_controls:

Restricting access
------------------

Errbot features a number of options to limit and restrict access to commands of your bot.
All of these are configured through the `config.py` file as explained in
:ref:`configuration <configuration>`.

The first of these is `BOT_ADMINS`, which sets up the administrators for your bot.
Some commands are hardcoded to be admin-only so the people listed here will be given access to those commands
(the users listed here will also receive warning messages generated by the :func:`~errbot.botplugin.BotPlugin.warn_admins` plugin function).

More advanced access controls can be set up using the `ACCESS_CONTROLS` and `ACCESS_CONTROLS_DEFAULT` options which allow you to set up sophisticated rules.
The example :download:`config.py <config-template.py>` file contains more information about the format of these options.

.. note::
    Different backends have different formats to identify users.
    Refer to the backend-specific notes at the end of the :ref:`configuration <configuration>` chapter to see which format you should use.


Command filters
^^^^^^^^^^^^^^^

If our built-in access controls don't fit your needs, you can always create your own easily using *command filters*.
Command filters are functions which are called automatically by errbot whenever a user executes a command.
They allow the command to be allowed, blocked or even modified based on logic you implement yourself.
In fact, the restrictions enforced by `BOT_ADMINS` and `ACCESS_CONTROLS` above are implemented using a command filter themselves
so they can serve as a good :mod:`example <errbot.core_plugins.acls>` (be sure to view the module source).

You can add command filters to your bot by including them as part of any regular errbot plugin,
it will find and register them automatically when your plugin is loaded.
Any method in your plugin which is decorated by :func:`~errbot.cmdfilter` will then act as a command filter.
